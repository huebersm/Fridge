package fridge;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import fridge.History;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HISTORY.
*/
public class HistoryDao extends AbstractDao<History, Void> {

    public static final String TABLENAME = "HISTORY";

    /**
     * Properties of entity History.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property InternalId = new Property(0, long.class, "internalId", false, "INTERNAL_ID");
        public final static Property UsedWhen = new Property(1, Long.class, "usedWhen", false, "USED_WHEN");
        public final static Property UsedTil = new Property(2, Long.class, "usedTil", false, "USED_TIL");
        public final static Property Haltbarkeit = new Property(3, Long.class, "haltbarkeit", false, "HALTBARKEIT");
    };


    public HistoryDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HISTORY' (" + //
                "'INTERNAL_ID' INTEGER NOT NULL UNIQUE ," + // 0: internalId
                "'USED_WHEN' INTEGER," + // 1: usedWhen
                "'USED_TIL' INTEGER," + // 2: usedTil
                "'HALTBARKEIT' INTEGER);"); // 3: haltbarkeit
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HISTORY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, History entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getInternalId());
 
        Long usedWhen = entity.getUsedWhen();
        if (usedWhen != null) {
            stmt.bindLong(2, usedWhen);
        }
 
        Long usedTil = entity.getUsedTil();
        if (usedTil != null) {
            stmt.bindLong(3, usedTil);
        }
 
        Long haltbarkeit = entity.getHaltbarkeit();
        if (haltbarkeit != null) {
            stmt.bindLong(4, haltbarkeit);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public History readEntity(Cursor cursor, int offset) {
        History entity = new History( //
            cursor.getLong(offset + 0), // internalId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // usedWhen
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // usedTil
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // haltbarkeit
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, History entity, int offset) {
        entity.setInternalId(cursor.getLong(offset + 0));
        entity.setUsedWhen(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUsedTil(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setHaltbarkeit(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(History entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(History entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
