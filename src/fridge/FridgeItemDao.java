package fridge;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import fridge.FridgeItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FRIDGE_ITEM.
*/
public class FridgeItemDao extends AbstractDao<FridgeItem, Long> {

    public static final String TABLENAME = "FRIDGE_ITEM";

    /**
     * Properties of entity FridgeItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property InternalId = new Property(0, Long.class, "internalId", true, "INTERNAL_ID");
        public final static Property Barcode = new Property(1, Long.class, "barcode", false, "BARCODE");
        public final static Property Avg_haltbarkeit = new Property(2, Long.class, "avg_haltbarkeit", false, "AVG_HALTBARKEIT");
        public final static Property Times_changed = new Property(3, Long.class, "times_changed", false, "TIMES_CHANGED");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
    };


    public FridgeItemDao(DaoConfig config) {
        super(config);
    }
    
    public FridgeItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FRIDGE_ITEM' (" + //
                "'INTERNAL_ID' INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: internalId
                "'BARCODE' INTEGER UNIQUE ," + // 1: barcode
                "'AVG_HALTBARKEIT' INTEGER," + // 2: avg_haltbarkeit
                "'TIMES_CHANGED' INTEGER," + // 3: times_changed
                "'NAME' TEXT);"); // 4: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FRIDGE_ITEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FridgeItem entity) {
        stmt.clearBindings();
 
        Long internalId = entity.getInternalId();
        if (internalId != null) {
            stmt.bindLong(1, internalId);
        }
 
        Long barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindLong(2, barcode);
        }
 
        Long avg_haltbarkeit = entity.getAvg_haltbarkeit();
        if (avg_haltbarkeit != null) {
            stmt.bindLong(3, avg_haltbarkeit);
        }
 
        Long times_changed = entity.getTimes_changed();
        if (times_changed != null) {
            stmt.bindLong(4, times_changed);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FridgeItem readEntity(Cursor cursor, int offset) {
        FridgeItem entity = new FridgeItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // internalId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // barcode
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // avg_haltbarkeit
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // times_changed
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // name
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FridgeItem entity, int offset) {
        entity.setInternalId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBarcode(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setAvg_haltbarkeit(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setTimes_changed(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FridgeItem entity, long rowId) {
        entity.setInternalId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FridgeItem entity) {
        if(entity != null) {
            return entity.getInternalId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
